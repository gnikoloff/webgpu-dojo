[[block]]
struct Uniforms {
  projectionMatrix: mat4x4<f32>;
  viewMatrix: mat4x4<f32>;
  modelMatrix: mat4x4<f32>;
};
[[group(0), binding(0)]]
var<uniform> uniforms: Uniforms;

[[block]]
struct InstancedTransform {
  instanceModelMatrix: [[stride(64)]] array<mat4x4<f32>, 16>;
};
[[group(0), binding(1)]]
var<uniform> instancedTransform: InstancedTransform;


struct Input {
  [[builtin(instance_index)]] instanceIdx : u32;
  [[location(0)]] position: vec4<f32>;
  [[location(1)]] normal: vec3<f32>;
};

struct Output {
  [[builtin(position)]] Position: vec4<f32>;
  [[location(0)]] normal: vec3<f32>;
};

[[stage(vertex)]]
fn main (input: Input) -> Output {
  var output: Output;

  let instancePos: vec4<f32> = uniforms.modelMatrix *
                    instancedTransform.instanceModelMatrix[input.instanceIdx] *
                    input.position;
  
  
  output.Position = uniforms.projectionMatrix *
                    uniforms.viewMatrix *
                    uniforms.modelMatrix *
                    instancedTransform.instanceModelMatrix[input.instanceIdx] *
                    input.position;
                    
  output.normal = input.normal;

  return output;
}
